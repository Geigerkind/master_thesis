import pickle

import matplotlib as mpl

from sources.config import BIN_FOLDER_PATH

mpl.use('Agg')
import matplotlib.pyplot as plt
import numpy as np

# BIN_FOLDER_PATH = "/home/shino/Uni/master_thesis/external_eval/bin"

# dt_model_config = (1, 16, 16, 1, 32, 75, "1234")
dt_model_config = (1, 64, 32, 8, 32, 75, "1234")
# knn_model_config = (1, 64, 32, 8, 32, 75, "1234")
knn_model_config = (1, 16, 32, 1, 64, 75, "1234")

evaluation_name_dt = "eval_{0}_DT_{1}_{2}_KNN_{3}_{4}_{5}_DS_{6}".format(dt_model_config[0], dt_model_config[1],
                                                                         dt_model_config[2],
                                                                         dt_model_config[3], dt_model_config[4],
                                                                         dt_model_config[5], dt_model_config[6])

evaluation_name_knn = "eval_{0}_DT_{1}_{2}_KNN_{3}_{4}_{5}_DS_{6}".format(knn_model_config[0], knn_model_config[1],
                                                                          knn_model_config[2],
                                                                          knn_model_config[3], knn_model_config[4],
                                                                          knn_model_config[5], knn_model_config[6])

data = pickle.load(open("/home/shino/Uni/master_thesis/bin/pregen_data/data_1_1234.pkl", "rb"))
model_dt = pickle.load(open(BIN_FOLDER_PATH + "/" + evaluation_name_dt + "/evaluation_dt_model.pkl", "rb"))

dt_features = []
dt_labels = []
knn_features = []
knn_labels = []
for cycle in range(10):
    for item in data.temporary_test_set_features_dt[0][cycle]:
        dt_features.append(item[2:])

    dt_labels = dt_labels + data.temporary_test_set_labels_dt[0][cycle]

    for item in data.temporary_test_set_features_knn[0][cycle]:
        knn_features.append(item[2:])

    knn_labels = knn_labels + data.temporary_test_set_labels_knn[0][cycle]

num_outputs = data.num_outputs - 2
name_map_features = data.name_map_features
data = 0

fi_dt = [0.0, 0.0, 0.0060980947101216265, 0.016543634931286966, 0.01272138417996671, 0.002392553905406547,
         0.0018090041723805572, 0.014822163218860374, 0.0038222507513203108, 0.0019257141189857885, 0.05036034196014355,
         0.006302337116680823, 0.023254456861086015, 0.046508913722171974, 0.005981384763516506, 0.003092813585037768,
         0.02357540921425033, 0.01768155691068768, 0.008344761182271787, 0.0056312549237009235, 0.011495929740612143,
         0.011612639687217374, 0.011758527120473816, 0.035392291308026735, 0.005747964870306044, 0.001838181659031879,
         0.0010503895194467483, 0.0010503895194467483, 0.0005543722463747236, 0.024129781460624944,
         0.0009336795728415725, 0.00020424240655914083, 0.0, 0.016806232311148694, 0.01712718466431301,
         0.01380095118606478, 0.004960172730720969, 0.02628891547282114]
# fi_dt = [0.0030344586117352357, 0.021212032795494995, 0.010124587868001078, 0.010182942841303722, 0.004259913051089859, 0.009132553321856918, 0.006506579523239853, 0.00665246695649635, 0.11837306334432351, 0.003092813585037768, 0.027310127505616677, 0.04925159746739416, 0.034516966708487806, 0.046800688588685024, 0.014968050652116816, 0.003559653371458582, 0.004376622997695034, 0.0010212120327954821, 0.00017506491990781914, 0.0011670994660519796, 0.003005281125083914, 0.20438829399235547, 0.0028885711784787382, 0.003092813585037768, 0.0025092638520117783, 0.00014588743325649745, 0.0018090041723806127, 0.0035304758848072604, 0.0003209523531643166, 0.00040848481311828166, 0.019782335949581342, 0.008724068508738636, 0.00802380882910747, 0.012721384179966821, 0.005631254923700868, 0.009074198348554274]
# fi_dt = model_dt.permutation_importance(dt_features, dt_labels, False, True, 16)
print(fi_dt)
fi_knn = [0.0007586146529338089, -0.00040848481311817064, 0.005164415137280054, 0.03746389286026902,
          2.9177486651321694e-05, -0.02065766054912027, 0.0015172293058676178, -0.004551687917602798,
          0.049630904793861064, 0.022145712368336595, 0.03702623056049953, -0.007206839202871074, 0.11043678697516995,
          0.15111020336708197, 0.1005747964870306, 0.05126484404633386, 0.11825635339771831, 0.10652700376389579,
          0.07031774282963266, 0.07133895486242817, 0.029965278790884953, 0.045575234149330374, 0.032182767776383736,
          0.03282467248271234, 0.043649520030344585, -0.01709800717766169, 0.013538353806203163, 0.016164327604820117,
          -0.017535669477431237, 0.040702593878563315, 0.024334023867184085, -0.0025092638520117783,
          0.02538441338663089, 0.022408309748198296, 0.04125696612493801, 0.0384851048930645, 0.07034692031628395,
          0.03801826510664372]
# fi_knn = [0.0016339392524727936, 0.035304758848072826, 0.00233419893210407, 0.004434977970997567, 0.004639220377556708, 0.0037930732646690446, 0.19989496104805538, 0.20208327254690284, 0.24439062819128765, 0.01683540979780007, 0.12966475067837657, 0.14229860239838943, 0.09932016456102477, 0.07475272080063022, 0.20893998190995833, 0.07939194117818693, 0.017273072097569564, 0.06389869576634677, 0.05654596913021914, 0.0521401686458729, 0.053453155545181374, 0.17039652204359124, 0.08216380241006038, 0.07839990663204277, 0.026143028039564697, 0.029177486651299933, 0.03950631692586004, 0.06553263501881956, 0.02754354739882714, 0.026726577772590687, 0.03200770285647603, 0.031978525369824706, 0.033349867242435716, 0.047384238321711014, 0.058734280629066604, 0.05750882618971209]
# fi_knn = GenerateFFNN.feature_importances(knn_features, knn_labels, num_outputs, False, False, 16)
print(fi_knn)

fig = plt.figure(figsize=(30 / 2.54, 15 / 2.54))
plt.bar(np.arange(len(name_map_features)) - 0.2, fi_dt, 0.4, align='center', color="green",
        label="Entscheidungswald")
plt.bar(np.arange(len(name_map_features)) + 0.2, fi_knn, 0.4, align='center', color="blue", label="FFNN")
plt.xticks(range(len(name_map_features)), name_map_features, size='small', rotation=90, fontsize=12)
# plt.xlabel("Feature (Diskret)", fontsize=16)
plt.ylabel("Klassifizierungsfehler", fontsize=16)
plt.ylim([0, min(1, max(2 * np.asarray(fi_dt).max(), 2 * np.asarray(fi_knn).max()))])
# plt.ylim([0, 1])
# plt.title("Wichtigkeit der Features")
plt.legend()
plt.tight_layout()
plt.savefig("{0}/fi_consolidated.png".format(BIN_FOLDER_PATH))
plt.clf()
plt.close(fig)
